import { I18n as BaseI18n, Dict, I18nOptions, TranslateOptions, Scope, DateTime, Numeric, NumberToCurrencyOptions, NumberToPercentageOptions, NumberToHumanSizeOptions, NumberToHumanOptions, StrftimeOptions, ToSentenceOptions, TimeAgoInWordsOptions } from 'i18n-js';
import { Metadata } from './typing';
import Storage from './storage';
export default class I18n extends BaseI18n {
    storage: Storage;
    private _hasNonTeladocTranslations;
    constructor(metadata: Metadata, nonTeladocTranslationsHash?: string, translations?: Dict, options?: Partial<I18nOptions>);
    translate<T = string>(scope: Scope, options?: TranslateOptions): string | T;
    pluralize(count: number, scope: Scope, options?: TranslateOptions): string;
    localize(type: string, value: string | number | Date | null | undefined, options?: Dict): string;
    toTime(scope: Scope, input: DateTime): string;
    numberToCurrency(input: Numeric, options?: Partial<NumberToCurrencyOptions>): string;
    numberToPercentage(input: Numeric, options?: Partial<NumberToPercentageOptions>): string;
    numberToHumanSize(input: Numeric, options?: Partial<NumberToHumanSizeOptions>): string;
    numberToHuman(input: Numeric, options?: Partial<NumberToHumanOptions>): string;
    strftime(date: Date, format: string, options?: Partial<StrftimeOptions>): string;
    toSentence(items: any[], options?: Partial<ToSentenceOptions>): string;
    timeAgoInWords(fromTime: DateTime, toTime: DateTime, options?: TimeAgoInWordsOptions): string;
    get(scope: Scope): any;
    private getFeatureFromScope;
    setMetadata(metadata: Metadata): void;
    loadingFromRedis(): boolean;
    app(): string;
    country(): string;
    brand(): string;
    get hasNonTeladocTranslations(): boolean;
    storeDictionary(feature: string): void;
    removeTranslationsForTimestampKeys(timestampKeys: string[]): void;
}
