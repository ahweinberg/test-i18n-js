"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var merge_1 = require("lodash/merge");
var StorageKeys = {
    TRANSLATIONS: 'i18n:translations',
    NON_TELADOC_TRANSLATIONS: 'i18n:non_teladoc_translations',
    LOADING_FROM_REDIS: 'i18n:loading_from_redis',
    TIMESTAMPS: 'i18n:timestamps',
    APP: 'i18n:app',
    COUNTRY: 'i18n:country',
    BRAND: 'i18n:brand',
};
var Storage = /** @class */ (function () {
    function Storage() {
        this.storage = window.sessionStorage;
    }
    Storage.prototype.loadingFromRedis = function () {
        return this.storage.getItem(StorageKeys.LOADING_FROM_REDIS);
    };
    Storage.prototype.app = function () {
        return this.storage.getItem(StorageKeys.APP)
            || window.localStorage.getItem(StorageKeys.APP);
    };
    Storage.prototype.country = function () {
        return this.storage.getItem(StorageKeys.COUNTRY)
            || window.localStorage.getItem(StorageKeys.COUNTRY);
    };
    Storage.prototype.brand = function () {
        return this.storage.getItem(StorageKeys.BRAND)
            || window.localStorage.getItem(StorageKeys.BRAND);
    };
    Storage.prototype.setMetadata = function (metadata) {
        var appChanged = this.storeString(StorageKeys.APP, metadata.app);
        var countryChanged = this.storeString(StorageKeys.COUNTRY, metadata.country);
        var brandChanged = this.storeString(StorageKeys.BRAND, metadata.brand);
        var loadingFromRedisChanged = this.storeBoolean(StorageKeys.LOADING_FROM_REDIS, metadata.loading_from_redis);
        this.setConfig(metadata);
        return (appChanged || countryChanged || brandChanged || loadingFromRedisChanged);
    };
    Storage.prototype.translations = function () {
        return JSON.parse(this.storage.getItem(StorageKeys.TRANSLATIONS) || '{}');
    };
    Storage.prototype.nonTeladocTranslations = function () {
        return JSON.parse(this.storage.getItem(StorageKeys.NON_TELADOC_TRANSLATIONS)
            || '{}');
    };
    Storage.prototype.setNonTeladocTranslations = function (translations) {
        this.storage.setItem(StorageKeys.NON_TELADOC_TRANSLATIONS, JSON.stringify(translations));
    };
    Storage.prototype.removeNonTeladocTranslations = function () {
        this.storage.removeItem(StorageKeys.NON_TELADOC_TRANSLATIONS);
    };
    Storage.prototype.timestamps = function () {
        return JSON.parse(this.storage.getItem(StorageKeys.TIMESTAMPS) || '{}');
    };
    Storage.prototype.storeTranslations = function (translations) {
        this.storeTranslationsDict(StorageKeys.TRANSLATIONS, translations);
    };
    Storage.prototype.storeTimestamps = function (timestamps) {
        this.storeDict(StorageKeys.TIMESTAMPS, timestamps);
    };
    Storage.prototype.setConfig = function (config, storage) {
        if (storage === void 0) { storage = window.localStorage; }
        this.storeString(StorageKeys.APP, config.app, storage);
        this.storeString(StorageKeys.COUNTRY, config.country, storage);
        this.storeString(StorageKeys.BRAND, config.brand, storage);
    };
    Storage.prototype.storeString = function (key, value, storage) {
        if (storage === void 0) { storage = this.storage; }
        var savedValue = storage.getItem(key);
        if (savedValue !== value) {
            storage.setItem(key, value);
            return true;
        }
        return false;
    };
    Storage.prototype.storeBoolean = function (key, value, storage) {
        if (storage === void 0) { storage = this.storage; }
        var savedValue = storage.getItem(key);
        var newValueStringified = JSON.stringify(value);
        if (savedValue !== newValueStringified) {
            storage.setItem(key, newValueStringified);
            return true;
        }
        return false;
    };
    Storage.prototype.storeDict = function (key, value, storage) {
        if (storage === void 0) { storage = this.storage; }
        var savedValue = storage.getItem(key);
        if (savedValue === null) {
            storage.setItem(key, JSON.stringify(value));
            return;
        }
        var newValue = (0, merge_1.default)(JSON.parse(savedValue || '{}'), value);
        storage.setItem(key, JSON.stringify(newValue));
    };
    Storage.prototype.storeTranslationsDict = function (key, value, storage) {
        if (storage === void 0) { storage = this.storage; }
        var savedValue = storage.getItem(key);
        if (savedValue === null) {
            storage.setItem(key, JSON.stringify(value));
            return;
        }
        var newValue = JSON.parse(savedValue);
        Object.entries(value).forEach(function (valueEntry) {
            var locale = valueEntry[0], localeTranslations = valueEntry[1];
            Object.entries(localeTranslations).forEach(function (localeTranslationsEntry) {
                var feature = localeTranslationsEntry[0], featureTranslations = localeTranslationsEntry[1];
                newValue[locale] || (newValue[locale] = {});
                newValue[locale][feature] = featureTranslations;
            });
        });
        storage.setItem(key, JSON.stringify(newValue));
    };
    Storage.prototype.removeTimestampsForTimestampKeys = function (timestampKeys) {
        var timestamps = this.timestamps();
        timestampKeys.forEach(function (timestampKey) { return delete timestamps[timestampKey]; });
        this.storage.setItem(StorageKeys.TIMESTAMPS, JSON.stringify(timestamps));
    };
    Storage.prototype.removeTranslationsForTimestampKeys = function (timestampKeys) {
        var _this = this;
        var translations = this.translations();
        timestampKeys.forEach(function (timestampKey) {
            translations = _this.removeTranslationsForDictionary(translations, timestampKey);
        });
        this.storage.setItem(StorageKeys.TRANSLATIONS, JSON.stringify(translations));
        return translations;
    };
    Storage.prototype.removeTranslationsForDictionary = function (translations, timestampKey) {
        var _a = timestampKey.split('.'), locale = _a[0], feature = _a[1];
        if (translations[locale] && translations[locale][feature]) {
            var _b = translations, _c = locale, localeTranslations = _b[_c], otherLocaleTranslations = __rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
            var _d = localeTranslations, _e = feature, _featureTranslations = _d[_e], otherFeatureTranslations = __rest(_d, [typeof _e === "symbol" ? _e : _e + ""]);
            var translationsWithRemovedDictionary = otherLocaleTranslations;
            translationsWithRemovedDictionary[locale] = otherFeatureTranslations;
            return translationsWithRemovedDictionary;
        }
        return translations;
    };
    Storage.prototype.clearTranslations = function () {
        this.storage.setItem(StorageKeys.TRANSLATIONS, '{}');
        this.storage.setItem(StorageKeys.TIMESTAMPS, '{}');
    };
    return Storage;
}());
exports.default = Storage;
