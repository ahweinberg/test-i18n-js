import { Dict } from 'i18n-js';
import merge from 'lodash/merge';
import { Config, Metadata } from './typing';
import jsLogger, { ILogger } from "js-logger";

jsLogger.useDefaults();

const logger: ILogger = jsLogger.get("myLogger");

const StorageKeys = {
  TRANSLATIONS: 'i18n:translations',
  NON_TELADOC_TRANSLATIONS: 'i18n:non_teladoc_translations',
  LOADING_FROM_REDIS: 'i18n:loading_from_redis',
  TIMESTAMPS: 'i18n:timestamps',
  APP: 'i18n:app',
  COUNTRY: 'i18n:country',
  BRAND: 'i18n:brand',
} as const;

export default class Storage {
  public storage;

  constructor() {
    this.storage = window.sessionStorage;
  }

  public loadingFromRedis(): string | null {
    console.log("in console log")
    logger.info("loading from redis in storage.ts")
    return this.storage.getItem(StorageKeys.LOADING_FROM_REDIS);
  }

  public app(): string | null {
    logger.info("in app method in storage.ts")
    return this.storage.getItem(StorageKeys.APP)
      || window.localStorage.getItem(StorageKeys.APP);
  }

  public country(): string | null {
    logger.info("in country method in storage.ts")
    return this.storage.getItem(StorageKeys.COUNTRY)
      || window.localStorage.getItem(StorageKeys.COUNTRY);
  }

  public brand(): string | null {
    logger.info("in brand method in storage.ts")
    return this.storage.getItem(StorageKeys.BRAND)
      || window.localStorage.getItem(StorageKeys.BRAND);
  }

  public setMetadata(metadata: Metadata): boolean {
    logger.info("setting metadata in storage.ts")
    const appChanged = this.storeString(StorageKeys.APP, metadata.app);
    const countryChanged = this.storeString(StorageKeys.COUNTRY, metadata.country);
    const brandChanged = this.storeString(StorageKeys.BRAND, metadata.brand);
    const loadingFromRedisChanged = this.storeBoolean(
      StorageKeys.LOADING_FROM_REDIS,
      metadata.loading_from_redis,
    );

    this.setConfig(metadata as Config);

    return (appChanged || countryChanged || brandChanged || loadingFromRedisChanged);
  }

  public translations(): Dict {
    logger.info("getting translations in storage.ts")
    return JSON.parse(
      this.storage.getItem(StorageKeys.TRANSLATIONS) || '{}',
    );
  }

  public nonTeladocTranslations(): Dict {
    return JSON.parse(
      this.storage.getItem(StorageKeys.NON_TELADOC_TRANSLATIONS)
        || '{}',
    );
  }

  public setNonTeladocTranslations(translations: Dict) {
    this.storage.setItem(
      StorageKeys.NON_TELADOC_TRANSLATIONS,
      JSON.stringify(translations),
    );
  }

  public removeNonTeladocTranslations() {
    this.storage.removeItem(StorageKeys.NON_TELADOC_TRANSLATIONS);
  }

  public timestamps(): Dict {
    return JSON.parse(
      this.storage.getItem(StorageKeys.TIMESTAMPS) || '{}',
    );
  }

  public storeTranslations(translations: Dict) {
    this.storeTranslationsDict(
      StorageKeys.TRANSLATIONS,
      translations,
    );
  }

  public storeTimestamps(timestamps: Dict) {
    this.storeDict(StorageKeys.TIMESTAMPS, timestamps);
  }

  private setConfig(config: Config, storage = window.localStorage) {
    this.storeString(StorageKeys.APP, config.app, storage);
    this.storeString(StorageKeys.COUNTRY, config.country, storage);
    this.storeString(StorageKeys.BRAND, config.brand, storage);
  }

  private storeString(key: string, value: string, storage = this.storage): boolean {
    const savedValue = storage.getItem(key);

    if (savedValue !== value) {
      storage.setItem(key, value);
      return true;
    }

    return false;
  }

  private storeBoolean(key: string, value: boolean, storage = this.storage): boolean {
    const savedValue = storage.getItem(key);
    const newValueStringified = JSON.stringify(value);

    if (savedValue !== newValueStringified) {
      storage.setItem(key, newValueStringified);

      return true;
    }

    return false;
  }

  private storeDict(key: string, value: Dict, storage = this.storage) {
    const savedValue = storage.getItem(key);

    if (savedValue === null) {
      storage.setItem(key, JSON.stringify(value));

      return;
    }

    const newValue = merge(JSON.parse(savedValue || '{}'), value);

    storage.setItem(key, JSON.stringify(newValue));
  }

  private storeTranslationsDict(key: string, value: Dict, storage = this.storage) {
    const savedValue = storage.getItem(key);

    if (savedValue === null) {
      storage.setItem(key, JSON.stringify(value));
      return;
    }

    const newValue = JSON.parse(savedValue as string);
    Object.entries(value).forEach((valueEntry) => {
      const [locale, localeTranslations] = valueEntry;
      Object.entries(localeTranslations).forEach((localeTranslationsEntry) => {
        const [feature, featureTranslations] = localeTranslationsEntry;
        newValue[locale] ||= {};
        newValue[locale][feature] = featureTranslations;
      });
    });

    storage.setItem(key, JSON.stringify(newValue));
  }

  public removeTimestampsForTimestampKeys(timestampKeys: string[]) {
    const timestamps = this.timestamps();

    timestampKeys.forEach((timestampKey) => delete timestamps[timestampKey]);

    this.storage.setItem(
      StorageKeys.TIMESTAMPS,
      JSON.stringify(timestamps),
    );
  }

  public removeTranslationsForTimestampKeys(timestampKeys: string[]): Dict {
    let translations = this.translations();

    timestampKeys.forEach((timestampKey) => {
      translations = this.removeTranslationsForDictionary(translations, timestampKey);
    });

    this.storage.setItem(
      StorageKeys.TRANSLATIONS,
      JSON.stringify(translations),
    );
    return translations;
  }

  private removeTranslationsForDictionary(
    translations: Dict,
    timestampKey: string,
  ): Dict {
    const [locale, feature] = timestampKey.split('.');
    if (translations[locale] && translations[locale][feature]) {
      const { [locale]: localeTranslations, ...otherLocaleTranslations } = translations;
      const { [feature]: _featureTranslations, ...otherFeatureTranslations } = localeTranslations;

      const translationsWithRemovedDictionary = otherLocaleTranslations;
      translationsWithRemovedDictionary[locale] = otherFeatureTranslations;

      return translationsWithRemovedDictionary;
    }

    return translations;
  }

  public clearTranslations() {
    this.storage.setItem(StorageKeys.TRANSLATIONS, '{}');
    this.storage.setItem(StorageKeys.TIMESTAMPS, '{}');
  }
}
