/* eslint max-classes-per-file: ["error", { ignoreExpressions: true }] */
import { Dict } from 'i18n-js';
import I18n from './I18n';

window.CMS_DICTIONARY_ENDPOINT_URL = 'teladoc_cms/dictionary';
window.NON_TELADOC_TRANSLATIONS_ENDPOINT_URL = 'teladoc_cms/non_teladoc_translations';

jest.mock('i18n-js', () => {
  class LocalesMock {
    private registry: Dict;

    constructor() {
      this.registry = {};
    }

    register(locale: string, fallbacks: string[]) {
      this.registry[locale] = fallbacks;
    }

    get(locale: string) {
      return this.registry[locale];
    }
  }

  return {
    I18n: class I18nMock {
      defaultSeparator = '.';

      locales: LocalesMock;

      constructor() {
        this.locales = new LocalesMock();
      }

      translate() {}

      pluralize() {}

      localize() {}

      toTime() {}

      numberToCurrency() {}

      numberToPercentage() {}

      numberToHumanSize() {}

      numberToHuman() {}

      strftime() {}

      toSentence() {}

      timeAgoInWords() {}

      get() {}
    },
  };
});

export function mockI18n(): I18n {
  window.sessionStorage.setItem('i18n:app', 'any_app');
  window.sessionStorage.setItem('i18n:country', 'country');
  window.sessionStorage.setItem('i18n:brand', 'any_brand');
  window.sessionStorage.setItem('i18n:loading_from_redis', 'false');

  const metadata = {
    app: 'any_app',
    brand: 'any_brand',
    country: 'country',
    loading_from_redis: false,
  };
  const i18n = new I18n(metadata);

  i18n.enableFallback = true;
  i18n.locales.register('en-us', ['en-us', 'en']);
  i18n.locales.register('fr-ca', ['fr-ca', 'fr', 'en-ca', 'en-us', 'en']);
  i18n.locales.register('es-us', ['es-us', 'es', 'en-us', 'en']);
  i18n.locales.register('da-dk', ['da-dk', 'da-us', 'da', 'en-dk', 'en-us', 'en']);
  i18n.locales.register('en', ['en', 'en-us']);
  i18n.locales.register('fr', ['fr', 'en-us', 'en']);
  i18n.locales.register('es', ['es', 'es-us', 'en-us', 'en']);
  i18n.locales.register('da', ['da', 'da-us', 'en-us', 'en']);

  return i18n;
}

export function setTimestamps(i18n: I18n, timestamps: Dict) {
  i18n.storage.storage.setItem('i18n:timestamps', JSON.stringify(timestamps));
}

export function setTranslations(i18n: I18n, translations: Dict) {
  i18n.storage.storage.setItem('i18n:translations', JSON.stringify(translations));
}

export function outdatedTimestamp(): string {
  const invalidationTime = 1000 * 60 * 60;

  return (Date.now() - invalidationTime - 1).toString();
}

export function oldTimestamp(): string {
  const timePassed = 1000 * 60 * 30; // 30 minutes

  return (Date.now() - timePassed).toString();
}

export function dictionaryEndpointParams(i18n: I18n, feature: string) {
  const params = {
    locale: i18n.locale,
    app: i18n.app(),
    feature,
    country: i18n.country(),
    brand: i18n.brand(),
  };

  return new URLSearchParams(params);
}

jest.mock('sync-fetch');

jest.useFakeTimers().setSystemTime(new Date('2023-01-01'));
