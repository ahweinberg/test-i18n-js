import Storage from '../src/storage';
import { Metadata } from '../src/typing';

const storage = new Storage();

describe('Storage', () => {
  describe('#loadingFromRedis', () => {
    describe('when having the value in storage', () => {
      beforeEach(() => {
        storage.storage.setItem('i18n:loading_from_redis', 'true');
      });

      it('returns the value from the storage', () => {
        expect(storage.loadingFromRedis()).toBe('true');
      });
    });

    describe('when not having the value in the storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:loading_from_redis');
      });

      it('returns null', () => {
        expect(storage.loadingFromRedis()).toBe(null);
      });
    });
  });

  describe('#app', () => {
    const appName = 'app';

    describe('when having the value in storage', () => {
      beforeEach(() => {
        storage.storage.setItem('i18n:app', appName);
        window.localStorage.setItem('i18n:app', 'app2');
      });

      it('returns the value from the storage', () => {
        expect(storage.app()).toBe(appName);
      });
    });

    describe('when having the value only in local storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:app');
        window.localStorage.setItem('i18n:app', appName);
      });

      it('returns the value from the storage', () => {
        expect(storage.app()).toBe(appName);
      });
    });

    describe('when not having the value in any storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:app');
        window.localStorage.removeItem('i18n:app');
      });

      it('returns null', () => {
        expect(storage.app()).toBe(null);
      });
    });
  });

  describe('#country', () => {
    const countryName = 'country';

    describe('when having the value in storage', () => {
      beforeEach(() => {
        storage.storage.setItem('i18n:country', countryName);
        window.localStorage.setItem('i18n:country', 'country2');
      });

      it('returns the value from the storage', () => {
        expect(storage.country()).toBe(countryName);
      });
    });

    describe('when having the value only in local storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:country');
        window.localStorage.setItem('i18n:country', countryName);
      });

      it('returns the value from the storage', () => {
        expect(storage.country()).toBe(countryName);
      });
    });

    describe('when not having the value in any storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:country');
        window.localStorage.removeItem('i18n:country');
      });

      it('returns null', () => {
        expect(storage.country()).toBe(null);
      });
    });
  });

  describe('#brand', () => {
    const brandName = 'brand';

    describe('when having the value in storage', () => {
      beforeEach(() => {
        storage.storage.setItem('i18n:brand', brandName);
        window.localStorage.setItem('i18n:brand', 'brand2');
      });

      it('returns the value from the storage', () => {
        expect(storage.brand()).toBe(brandName);
      });
    });

    describe('when having the value only in local storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:brand');
        window.localStorage.setItem('i18n:brand', brandName);
      });

      it('returns the value from the storage', () => {
        expect(storage.brand()).toBe(brandName);
      });
    });

    describe('when not having the value in any storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:brand');
        window.localStorage.removeItem('i18n:brand');
      });

      it('returns null', () => {
        expect(storage.brand()).toBe(null);
      });
    });
  });

  describe('#setMetadata', () => {
    const newAppName = 'app';
    const newCountryName = 'country';
    const newBrandName = 'brand';
    const newLoadingFromRedis = true;

    const newMetadata: Metadata = {
      app: newAppName,
      country: newCountryName,
      brand: newBrandName,
      loading_from_redis: newLoadingFromRedis,
    };

    describe('when trying to store the same values', () => {
      const oldAppName = newAppName;
      const oldCountryName = newCountryName;
      const oldBrandName = newBrandName;
      const oldLoadingFromRedis = newLoadingFromRedis;

      beforeEach(() => {
        storage.storage.setItem('i18n:app', oldAppName);
        storage.storage.setItem('i18n:country', oldCountryName);
        storage.storage.setItem('i18n:brand', oldBrandName);
        storage.storage.setItem('i18n:loading_from_redis', oldLoadingFromRedis.toString());
      });

      it('returns false', () => {
        expect(storage.setMetadata(newMetadata)).toEqual(false);

        expect(storage.app()).toBe(newAppName);
        expect(storage.country()).toBe(newCountryName);
        expect(storage.brand()).toBe(newBrandName);
        expect(storage.loadingFromRedis()).toBe(newLoadingFromRedis.toString());

        expect(window.localStorage.getItem('i18n:app')).toBe(newAppName);
        expect(window.localStorage.getItem('i18n:country')).toBe(newCountryName);
        expect(window.localStorage.getItem('i18n:brand')).toBe(newBrandName);
      });
    });

    describe('when brand name is changed', () => {
      const oldAppName = newAppName;
      const oldCountryName = newCountryName;
      const oldBrandName = 'old brand';
      const oldLoadingFromRedis = newLoadingFromRedis;

      beforeEach(() => {
        storage.storage.setItem('i18n:app', oldAppName);
        storage.storage.setItem('i18n:country', oldCountryName);
        storage.storage.setItem('i18n:brand', oldBrandName);
        storage.storage.setItem('i18n:loading_from_redis', oldLoadingFromRedis.toString());
      });

      it('returns true', () => {
        expect(storage.setMetadata(newMetadata)).toEqual(true);

        expect(storage.app()).toBe(newAppName);
        expect(storage.country()).toBe(newCountryName);
        expect(storage.brand()).toBe(newBrandName);
        expect(storage.loadingFromRedis()).toBe(newLoadingFromRedis.toString());

        expect(window.localStorage.getItem('i18n:app')).toBe(newAppName);
        expect(window.localStorage.getItem('i18n:country')).toBe(newCountryName);
        expect(window.localStorage.getItem('i18n:brand')).toBe(newBrandName);
      });
    });

    describe('when there was no metadata saved in storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:app');
        storage.storage.removeItem('i18n:country');
        storage.storage.removeItem('i18n:brand');
        storage.storage.removeItem('i18n:loading_from_redis');
      });

      it('returns true', () => {
        expect(storage.setMetadata(newMetadata)).toEqual(true);

        expect(storage.app()).toBe(newAppName);
        expect(storage.country()).toBe(newCountryName);
        expect(storage.brand()).toBe(newBrandName);
        expect(storage.loadingFromRedis()).toBe(newLoadingFromRedis.toString());

        expect(window.localStorage.getItem('i18n:app')).toBe(newAppName);
        expect(window.localStorage.getItem('i18n:country')).toBe(newCountryName);
        expect(window.localStorage.getItem('i18n:brand')).toBe(newBrandName);
      });
    });
  });

  describe('#translations', () => {
    describe('when having translations in the storage', () => {
      const translations = {
        en: {
          feature: {
            key: 'value',
          },
        },
      };

      beforeEach(() => {
        storage.storage.setItem('i18n:translations', JSON.stringify(translations));
      });

      it('returns the value from the storage', () => {
        expect(storage.translations()).toEqual(translations);
      });
    });

    describe('when not having translations in the storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:translations');
      });

      it('returns null', () => {
        expect(storage.translations()).toEqual({});
      });
    });
  });

  describe('#nonTeladocTranslations', () => {
    describe('when having translations in the storage', () => {
      const nonTeladocTranslations = {
        en: {
          feature: {
            key: 'value',
          },
        },
      };

      beforeEach(() => {
        storage.storage.setItem('i18n:non_teladoc_translations', JSON.stringify(nonTeladocTranslations));
      });

      it('returns the value from the storage', () => {
        expect(storage.nonTeladocTranslations()).toEqual(nonTeladocTranslations);
      });
    });

    describe('when not having translations in the storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:non_teladoc_translations');
      });

      it('returns null', () => {
        expect(storage.nonTeladocTranslations()).toEqual({});
      });
    });
  });

  describe('#setNonTeladocTranslations', () => {
    const nonTeladocTranslations = {
      en: {
        feature: {
          key: 'value',
        },
      },
    };

    beforeEach(() => {
      storage.storage.removeItem('i18n:non_teladoc_translations');
    });

    it('sets the non teladoc translations', () => {
      storage.setNonTeladocTranslations(nonTeladocTranslations);
      expect(storage.nonTeladocTranslations()).toEqual(nonTeladocTranslations);
    });
  });

  describe('#removeNonTeladocTranslations', () => {
    const nonTeladocTranslations = {
      en: {
        feature: {
          key: 'value',
        },
      },
    };

    beforeEach(() => {
      storage.storage.setItem('i18n:non_teladoc_translations', JSON.stringify(nonTeladocTranslations));
    });

    it('removes the non teladoc translations', () => {
      storage.removeNonTeladocTranslations();
      expect(storage.nonTeladocTranslations()).toEqual({});
    });
  });

  describe('#timestamps', () => {
    describe('when having timestamps in the storage', () => {
      const timestamps = {
        'en.feature': Date.now(),
      };

      beforeEach(() => {
        storage.storage.setItem('i18n:timestamps', JSON.stringify(timestamps));
      });

      it('returns the value from the storage', () => {
        expect(storage.timestamps()).toEqual(timestamps);
      });
    });

    describe('when not having timestamps in the storage', () => {
      beforeEach(() => {
        storage.storage.removeItem('i18n:timestamps');
      });

      it('returns null', () => {
        expect(storage.timestamps()).toEqual({});
      });
    });
  });

  describe('#storeTranslations', () => {
    describe('when having translations in the storage', () => {
      const storedTranslations = {
        'en-us': {
          otherFeature: {
            key1: 'English value 1',
          },
          feature: {
            key1: 'English value 1',
            key2: 'English value 2',
          },
        },
        'fr-ca': {
          feature: {
            key1: 'French value 1',
          },
        },
      };

      const translationsToStore = {
        'en-us': {
          feature: {
            key1: 'New English value 1',
            key3: 'English value 3',
          },
        },
        'es-us': {
          feature: {
            key1: 'Spanish value 1',
          },
        },
      };

      const expectedTranslations = {
        'en-us': {
          otherFeature: {
            key1: 'English value 1',
          },
          feature: {
            key1: 'New English value 1',
            key3: 'English value 3',
          },
        },
        'fr-ca': {
          feature: {
            key1: 'French value 1',
          },
        },
        'es-us': {
          feature: {
            key1: 'Spanish value 1',
          },
        },
      };
      beforeEach(() => {
        storage.storage.setItem('i18n:translations', JSON.stringify(storedTranslations));
      });

      it('stores the translations', () => {
        storage.storeTranslations(translationsToStore);
        expect(storage.translations()).toEqual(expectedTranslations);
      });
    });

    describe('when not having translations in the storage', () => {
      const translationsToStore = {
        'en-us': {
          feature: {
            key1: 'English value 1',
          },
        },
        'fr-ca': {
          feature: {
            key1: 'French value 1',
          },
        },
      };

      beforeEach(() => {
        storage.storage.removeItem('i18n:translations');
      });

      it('stores the translations', () => {
        storage.storeTranslations(translationsToStore);
        expect(storage.translations()).toEqual(translationsToStore);
      });
    });
  });

  describe('#storeTimestamps', () => {
    describe('when having timestamps in the storage', () => {
      const storedTimestamps = {
        'en-us.feature': 1701334544716,
        'es-us.feature': 1701334544716,
      };

      const timestampsToStore = {
        'en-us.feature': 1701334578968,
        'fr-ca.feature': 1701334578968,
      };

      const expectedTimestamps = {
        'en-us.feature': 1701334578968,
        'es-us.feature': 1701334544716,
        'fr-ca.feature': 1701334578968,
      };
      beforeEach(() => {
        storage.storage.setItem('i18n:timestamps', JSON.stringify(storedTimestamps));
      });

      it('stores the timestamps in the storage', () => {
        storage.storeTimestamps(timestampsToStore);
        expect(storage.timestamps()).toEqual(expectedTimestamps);
      });
    });

    describe('when not having timestamps in the storage', () => {
      const timestampsToStore = {
        'en-us.feature': 1701334578968,
        'fr-ca.feature': 1701334578968,
      };

      beforeEach(() => {
        storage.storage.removeItem('i18n:timestamps');
      });

      it('stores the timestamps in the storage', () => {
        storage.storeTimestamps(timestampsToStore);
        expect(storage.timestamps()).toEqual(timestampsToStore);
      });
    });
  });

  describe('#removeTimestampsForTimestampKeys', () => {
    describe('when having timestamps in the storage', () => {
      const storedTimestamps = {
        'en-us.feature': 1701334544716,
        'es-us.feature': 1701334544716,
      };

      const timestampsToRemove = ['en-us.feature', 'fr-ca.feature'];

      const expectedTimestamps = {
        'es-us.feature': 1701334544716,
      };
      beforeEach(() => {
        storage.storage.setItem('i18n:timestamps', JSON.stringify(storedTimestamps));
      });

      it('removes the timestamps from the storage', () => {
        storage.removeTimestampsForTimestampKeys(timestampsToRemove);
        expect(storage.timestamps()).toEqual(expectedTimestamps);
      });
    });

    describe('when not having timestamps in the storage', () => {
      const timestampsToRemove = ['en-us.feature', 'fr-ca.feature'];

      beforeEach(() => {
        storage.storage.removeItem('i18n:timestamps');
      });

      it('removes the timestamps from the storage', () => {
        storage.removeTimestampsForTimestampKeys(timestampsToRemove);
        expect(storage.timestamps()).toEqual({});
      });
    });
  });

  describe('#removeTranslationsForTimestampKeys', () => {
    describe('when having translations in the storage', () => {
      const storedTranslations = {
        'en-us': {
          otherFeature: {
            key1: 'English value 1',
          },
          feature: {
            key1: 'English value 1',
            key2: 'English value 2',
          },
        },
        'fr-ca': {
          feature: {
            key1: 'French value 1',
          },
        },
        en: {
          feature: {
            key1: 'English value 1',
          },
        },
      };

      const timestampsToRemove = ['en-us.feature', 'es-us.feature', 'en.feature'];

      const expectedTranslations = {
        'en-us': {
          otherFeature: {
            key1: 'English value 1',
          },
        },
        'fr-ca': {
          feature: {
            key1: 'French value 1',
          },
        },
        en: {},
      };

      beforeEach(() => {
        storage.storage.setItem('i18n:translations', JSON.stringify(storedTranslations));
      });

      it('removes the translations from the storage', () => {
        storage.removeTranslationsForTimestampKeys(timestampsToRemove);
        expect(storage.translations()).toEqual(expectedTranslations);
      });
    });

    describe('when not having translations in the storage', () => {
      const timestampsToRemove = ['en-us.feature', 'fr-ca.feature'];

      beforeEach(() => {
        storage.storage.removeItem('i18n:translations');
      });

      it('removes the translations from the storage', () => {
        storage.removeTranslationsForTimestampKeys(timestampsToRemove);
        expect(storage.translations()).toEqual({});
      });
    });
  });

  describe('#clearTranslations', () => {
    const storedTranslations = {
      'en-us': {
        otherFeature: {
          key1: 'English value 1',
        },
        feature: {
          key1: 'English value 1',
          key2: 'English value 2',
        },
      },
      'fr-ca': {
        feature: {
          key1: 'French value 1',
        },
      },
    };

    const storedTimestamps = {
      'en-us.feature': 1701334544716,
      'es-us.feature': 1701334544716,
    };

    beforeEach(() => {
      storage.storage.setItem('i18n:translations', JSON.stringify(storedTranslations));
      storage.storage.setItem('i18n:timestamps', JSON.stringify(storedTimestamps));
    });

    it('removes the translations and the timestamps from the storage', () => {
      storage.clearTranslations();
      expect(storage.timestamps()).toEqual({});
      expect(storage.translations()).toEqual({});
    });
  });
});
