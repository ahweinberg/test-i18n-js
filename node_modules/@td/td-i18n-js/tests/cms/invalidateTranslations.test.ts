import invalidateTranslations from '../../src/cms/invalidateTranslations';
import {
  mockI18n, outdatedTimestamp, setTimestamps, setTranslations,
} from '../../src/setupTests';

const i18n = mockI18n();

describe('invalidateTranslations', () => {
  describe('when no timestamps are present', () => {
    const translations = {
      en: {
        feature: {
          key1: 'value 1',
        },
      },
    };

    beforeEach(() => {
      setTimestamps(i18n, {});
      setTranslations(i18n, translations);
    });

    it('should not change existing translations', () => {
      invalidateTranslations(i18n);

      expect(i18n.storage.timestamps()).toEqual({});
      expect(i18n.storage.translations()).toEqual(translations);
    });
  });

  describe('when no timestamps are outdated', () => {
    const timestamps = {
      'en.feature': Date.now().toString(),
      'fr.feature': Date.now().toString(),
    };
    const translations = {
      en: {
        feature: {
          key1: 'value 1',
        },
      },
      fr: {
        feature: {
          key1: 'French value 1',
        },
      },
    };

    beforeEach(() => {
      setTimestamps(i18n, timestamps);
      setTranslations(i18n, translations);
    });

    it('should not change existing translations', () => {
      invalidateTranslations(i18n);

      expect(i18n.storage.timestamps()).toEqual(timestamps);
      expect(i18n.storage.translations()).toEqual(translations);
    });
  });

  describe('when a timestamp is outdated', () => {
    const freshTimestamps = {
      'en.feature': Date.now().toString(),
      'fr.feature': Date.now().toString(),
    };
    const outdatedTimestamps = {
      'es.feature': outdatedTimestamp(),
      'da.feature': outdatedTimestamp(),
    };
    const timestamps = {
      ...freshTimestamps,
      ...outdatedTimestamps,
    };
    const freshTranslations = {
      en: {
        feature: {
          key1: 'value 1',
        },
      },
      fr: {
        feature: {
          key1: 'French value 1',
        },
      },
    };
    const outdatedTranslations = {
      es: {
        feature: {
          key1: 'Spanish value 1',
        },
      },
      da: {
        feature: {
          key1: 'Danish value 1',
        },
      },
    };
    const translations = {
      ...freshTranslations,
      ...outdatedTranslations,
    };

    beforeEach(() => {
      setTimestamps(i18n, timestamps);
      setTranslations(i18n, translations);
    });

    it('should remove all outdated translations', () => {
      invalidateTranslations(i18n);

      expect(i18n.storage.timestamps()).toEqual(freshTimestamps);
      expect(i18n.storage.translations()).toEqual({
        ...freshTranslations,
        es: {},
        da: {},
      });
    });
  });
});
