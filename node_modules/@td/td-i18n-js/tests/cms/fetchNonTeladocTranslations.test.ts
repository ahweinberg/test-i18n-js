import fetchNonTeladocTranslations from '../../src/cms/fetchNonTeladocTranslations';
import { mockI18n } from '../../src/setupTests';

const fetchMock = require('sync-fetch');

const i18n = mockI18n();

const NON_TELADOC_TRANSLATIONS_HASH = '1111111';
const NON_TELADOC_TRANSLATIONS = {
  en: {
    date: {
      formats: {
        default: '%Y-%m-%d', short: '%b %d', long: '%B %d, %Y',
      },
      day_names: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
      precision: 3,
      round_mode: 'default',
      significant: false,
      strip_insignificant_zeros: false,
    },
  },
};

describe('fetchNonTeladocTranslations', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('when request is succesful', () => {
    beforeAll(() => {
      fetchMock.mockReturnValue({
        json: jest.fn().mockReturnValue(NON_TELADOC_TRANSLATIONS),
        ok: true,
      });
    });

    describe('when there were no translations in local storage', () => {
      beforeEach(() => {
        i18n.storage.setNonTeladocTranslations({});
      });

      it('should fetch non teladoc translations and save them in local storage', () => {
        fetchNonTeladocTranslations(i18n, NON_TELADOC_TRANSLATIONS_HASH);

        expect(fetchMock).toHaveBeenCalledWith(`teladoc_cms/non_teladoc_translations?id=${NON_TELADOC_TRANSLATIONS_HASH}`, { method: 'GET' });

        expect(i18n.storage.nonTeladocTranslations()).toEqual(NON_TELADOC_TRANSLATIONS);
      });
    });

    describe('when there were translations in local storage', () => {
      beforeEach(() => {
        i18n.storage.setNonTeladocTranslations({
          en: {
            time: {
              significant: false,
              strip_insignificant_zeros: false,
            },
          },
        });
      });

      it('should fetch non teladoc translations and save them in local storage overriding existing ones', () => {
        fetchNonTeladocTranslations(i18n, NON_TELADOC_TRANSLATIONS_HASH);

        expect(fetchMock).toHaveBeenCalledWith(`teladoc_cms/non_teladoc_translations?id=${NON_TELADOC_TRANSLATIONS_HASH}`, { method: 'GET' });

        expect(i18n.storage.nonTeladocTranslations()).toEqual(NON_TELADOC_TRANSLATIONS);
      });
    });
  });

  describe('when request is not succesful', () => {
    beforeEach(() => {
      i18n.storage.setNonTeladocTranslations(NON_TELADOC_TRANSLATIONS);
      fetchMock.mockReturnValue({
        ok: false,
      });
    });

    it('should clear non teladoc translations', () => {
      fetchNonTeladocTranslations(i18n, NON_TELADOC_TRANSLATIONS_HASH);

      expect(fetchMock).toHaveBeenCalledWith(`teladoc_cms/non_teladoc_translations?id=${NON_TELADOC_TRANSLATIONS_HASH}`, { method: 'GET' });

      expect(i18n.storage.nonTeladocTranslations()).toEqual({});
    });
  });
});
